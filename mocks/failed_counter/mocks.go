// Code generated by MockGen. DO NOT EDIT.
// Source: ./failed_counter.go

// Package mockFailedCounter is a generated GoMock package.
package mockFailedCounter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFailedCounter is a mock of FailedCounter interface.
type MockFailedCounter struct {
	ctrl     *gomock.Controller
	recorder *MockFailedCounterMockRecorder
}

// MockFailedCounterMockRecorder is the mock recorder for MockFailedCounter.
type MockFailedCounterMockRecorder struct {
	mock *MockFailedCounter
}

// NewMockFailedCounter creates a new mock instance.
func NewMockFailedCounter(ctrl *gomock.Controller) *MockFailedCounter {
	mock := &MockFailedCounter{ctrl: ctrl}
	mock.recorder = &MockFailedCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailedCounter) EXPECT() *MockFailedCounterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFailedCounter) Add(accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockFailedCounterMockRecorder) Add(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFailedCounter)(nil).Add), accountID)
}

// Get mocks base method.
func (m *MockFailedCounter) Get(accountID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", accountID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFailedCounterMockRecorder) Get(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFailedCounter)(nil).Get), accountID)
}

// IsAccountLocked mocks base method.
func (m *MockFailedCounter) IsAccountLocked(accountID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountLocked", accountID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAccountLocked indicates an expected call of IsAccountLocked.
func (mr *MockFailedCounterMockRecorder) IsAccountLocked(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountLocked", reflect.TypeOf((*MockFailedCounter)(nil).IsAccountLocked), accountID)
}

// Reset mocks base method.
func (m *MockFailedCounter) Reset(accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockFailedCounterMockRecorder) Reset(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockFailedCounter)(nil).Reset), accountID)
}
